!IMPORTANT: You can not use object methods outside of a method in any class, but you can create objects outside of a class
!IMPORTANT NOTE: Only need one public static void main(String[] args) in the 2nd homeweork, and that would be in PR2_1Main
!IMPORTANT: Work on getters and setters functions
!IMPORTANT: Study and understand object orianted programming to become better
!IMPORTANT: anything that is not put inside a sub-class in anyway makes it an attribute of the main class
EX:
public class Main 
{
  //These two variables are called attributes, and are part of the Big class.
  int x = 5;
  int y = 3;
}

!IMPORTANT: If a class is a child then it can only use methods from its parents if you do something like, Parent Child = new Parent(), 
            then when you call the Child it will only be able to access functions from the Parent.

EX: if the class Parent has a method call talk, then the class Child extends Parent takes that method talk, 
    when you create the object for the Child that is dirived from Parent, it will only be able to use that talk method, 
    even if the Child class made its own method of talking.

EX:
class Parent 
{ // Superclass (parent)
  public void talk() 
  { //this is the method the child will inherit
    System.out.println("adult talk");
  }
}

class Child extends Parent 
{ // Subclass (child)
  public void talk() 
  {
    System.out.println("child talk");
  }
  //even though this method is part of the child class, it will not be abled to be called one we designate it with the Parent
  public void cry()
  {
    System.out.println("crying");
  }
}

public class Main 
{
  public static void main(String args[]) 
  {
    Parent Child = new Child(); // Create a Child object. It can only use methods that its parents used
    Child.talk(); // Call the method on the Child object
    Child.cry(); //this will not work as the object was created with th eparent in mind
  }
}

!IMPORTANT: Look at this code for reminder of what each thing is called:
class Animal //This is an individual class, and this is the parent of two other classes
{
    public void animalSound() //This is called a method, and when a class extends into this it is able to grab this and use it in a different way
    {
        System.out.println("The animal makes a sound");
    }
}

class Pig extends Animal //This is now a child class, meaning that it takes methods from the parent class Animal
{
    public void animalSound() //see how this and the parent class have the same name? you can do that if it is the child. it can reuse the same thing for different purposes
    {
        System.out.println("The pig says: wee wee");
    }
}

class Dog extends Animal //same situation as the pig
{
    public void animalSound() 
    {
        System.out.println("The dog says: bow wow");
    }
}

class Main //This is the main function
{
public static void main(String[] args) 
    {
        //Creating objects basically means that you are taking all the methods and functionality of a specific class and putting it into a namespace to be used later
        Animal myAnimal = new Animal();  // Create a Animal object
        Animal myPig = new Pig();  // Create a Pig object
        Animal myDog = new Dog();  // Create a Dog object
        //what we are doing here is that we are using our newly created objects and calling a method from it
        myAnimal.animalSound();
        myPig.animalSound();
        myDog.animalSound();
    }
}