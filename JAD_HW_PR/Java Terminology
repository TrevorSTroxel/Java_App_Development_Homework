Extends: extending a class that already has functionality, works with classes !IMPORTANT, CAN ONLY EXTEND ONCE IN A CLASS
        When you extends, you take the methods and variables from the class you are extending into.

Implement: interfaces dont have implementations for methods, so we are not inheriting code, works with interfaces !IMPORTANT, CAN IMPLEMENT AS MANY TIME AS YOU WANT
           

@Override: Indicates that a method declaration is intended to override a method declaration in a superclass.

abstract:? look more into this

Object (terminology):Java object is a combination of data and procedures working on the available data. An object has a state and behavior.
                     The state of an object is stored in fields (variables), while methods (functions) display the object's behavior. Objects are created from templates known as classes.
                     In Java, an object is created using the keyword "new".

Static: In Java, a static member is a member of a class that isn’t associated with an instance of a class. 
        Instead, the member belongs to the class itself. As a result, you can access the static member without first creating a class instance.

Class instance/instance variable: Instance variables in Java are non-static variables which are defined in a class outside any method, constructor or a block. 
                                  Each instantiated object of the class has a separate copy or instance of that variable. An instance variable belongs to a class.
EX:When you create a new object of the class you create an instance. Consider, if you have a STUDENT class, then

class Student
{
    String studentName;
    int studentScore;
}
And if you create two STUDENT objects like,

    Student student1 = new Student();
    Student student2 = new Student();

Then two instances of the class Student will be created.

Now each student would have his own name and score right? 
So the value that is stored inside ‘studentName’ and ‘studentScore’ would vary for different students, they are called ‘variables’. 
And like you saw that these variables hold their own value for each instance, they are called Instance Variables in Java.

Constructor: We create a constructor to initialize an object. They have the same name as the class but have no explicit return type. 
             It can be used to set initial values for object attributes. It is similar to a Java method
EX:
public class Puppy 
{
   public Puppy() 
   {
   }

   public Puppy(String name) 
   {
      // This constructor has one parameter, name.
   }
}

Trevor Terminology:
Big class: the class that is created when the file is created. Will have the same name
EX: after the creation of test.java, the big class would be called:
public class test //this is where you put all functionality of the file.
{
  ... //put other classes and other functionality in here like methods and other things like that
}
